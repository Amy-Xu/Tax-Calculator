'''This script houses the function which converts the output file generated by
SAS into an HDF5 file. This facilitates faster access later on.
'''
import pandas as pd
import h5py as h5
import os
# this is just for development 
from time import time


def sas_output_to_hd5(c_codes_path, h5_path='SAS_codes.h5'):
    '''Function for converting CSV containing output variables from SAS
    to an hdf5 file. 
    Takes file path to CSV and optionally file path for hdf5 file.
    By default will create latter in current working dir, overwriting all files
    with the same name.
    '''
    # load SAS csv in chunks, converting all values to np.float type
    sas_csv_iter = pd.read_csv(c_codes_path, chunksize=100, dtype=np.float64)    
    try:
        # try creating hdf5 file
        hd5_file = h5.File(h5_path, 'w')
    except IOError, e:
        # if file already exists, warn user, remove it and create a fresh one
        print 'Detected previous version of file, overwriting'
        os.remove(h5_path)
        hd5_file = h5.File(h5_path, 'w')
    start = time()
    # read in sas csv one chunk at a time
    for chunk in sas_csv_iter:
        # replace NAs with zeros and loop over resulting DataFrame
        no_NAs = chunk.fillna(0.0)
        for var in no_NAs:
            # check if variable is already defined
            if var in hd5_file:
                # combine this chunk with what's already there for this var
                add_chunk = np.concatenate((hd5_file[var], no_NAs[var]))
                # adjust hdf5 dataset size to fit new array
                hd5_file[var].resize(add_chunk.shape)
                # now dataset for var is set to combined array
                hd5_file[var][...] = add_chunk
            else:
                # if variable isn't yet defined in hd5 file, create extendable
                # and compressed dataset for it using first chunk as data
                hd5_file.create_dataset(var, data=no_NAs[var],
                    maxshape=(None,), compression='gzip')
                # raise
    hd5_file.close()
    print 'Took {} seconds'.format(time() - start)

if __name__ == '__main__':
    sas_output_to_hd5('test/data/withc_2013.csv')